import Image from 'next/image';
import Link from 'next/link';
import { Metadata, ResolvingMetadata } from 'next';
import { notFound } from "next/navigation";
import prisma from '@/lib/prisma';
import type { Post, User } from '@prisma/client';
import { DeletePostButton, UpdatePostButton } from '@/components/ui/postButtons';

interface PostPageProps {
    params: {
        id: string;
    };
}

type PostWithAuthor = Post & {
    author: User | null;
};

export async function generateStaticParams(): Promise<{ id: string }[]> {
    const posts = await prisma.post.findMany({
        select: {
            id: true,
        }
    });

    return posts.map((post) => ({
        id: post.id.toString(),
    }));
}

// Generate metadata (like title and description) for each post page
export async function generateMetadata(
    { params }: PostPageProps,
    parent: ResolvingMetadata
): Promise<Metadata> {
    const { id } = await params;
    const postId = parseInt(id, 10);

    if (isNaN(postId)) {
        return {
            title: 'Invalid Post ID',
        };
    }

    const post = await prisma.post.findUnique({
        where: { id: postId },
        select: {
            title: true,
            content: true,
            // imageUrl: true, // Uncomment if you add imageUrl to your schema
        }
    });

    if (!post) {
        return {
            title: 'Post Not Found',
        };
    }

    const excerpt = post.content?.substring(0, 155) + '...';

    return {
        title: post.title,
        description: excerpt, // Use generated excerpt
        openGraph: {
            title: post.title,
            description: excerpt,
            /* // Uncomment and use if imageUrl is added
            images: post.imageUrl
                ? [{
                    url: post.imageUrl,
                    width: 800,
                    height: 400,
                    alt: `Banner for ${post.title}`,
                  }]
                : [],
            */
        },
    };
}

// --- The Page Component ---
export default async function PostPage({ params }: PostPageProps) {
    const { id } = await params;
    const postId = parseInt(id, 10);

    if (isNaN(postId)) {
        console.error(`Invalid post ID received: ${id}`);
        notFound();
    }

    // Fetch the full post data needed for the page
    const post: PostWithAuthor | null = await prisma.post.findUnique({
        where: { id: postId },
        include: {
            author: true,
        },
    });

    if (!post) {
        notFound();
    }

    const authorName = post.author?.name ?? 'Unknown Author';

    // --- Content Rendering Logic ---
    // Decide how to render post.content.
    // Option 1: If post.content is SAFE HTML generated by you or a trusted source:
    const renderContentAsHTML = true; // Set this based on your content type

    // Option 2: If post.content is Markdown, you'll need a library
    // Install: npm install react-markdown remark-gfm / yarn add react-markdown remark-gfm
    // import ReactMarkdown from 'react-markdown';
    // import remarkGfm from 'remark-gfm';

    return (
        <article className="container mx-auto px-4 py-8 max-w-3xl">
            {/* Optional Banner Image - Uncomment if you add imageUrl */}
            {/* {post.imageUrl && (
                <div className="relative w-full h-64 md:h-80 mb-6 rounded-lg overflow-hidden shadow-lg">
                    <Image
                        src={post.imageUrl}
                        alt={`Banner for ${post.title}`}
                        layout="fill"
                        objectFit="cover"
                        priority
                    />
                </div>
            )} */}

            {/* Post Header */}
            <header className="mb-8">
                <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-3 text-gray-900 dark:text-white">
                    {post.title}
                </h1>
                <div className="text-gray-600 dark:text-gray-400 text-sm space-x-4">
                    <span>Published on {/*formattedDate*/}</span>
                    {post.author && <span>by {authorName}</span>}
                </div>
            </header>

            {/* Post Content */}
            <div className="prose prose-lg dark:prose-invert max-w-none">
                {renderContentAsHTML ? (
                    // Option 1: Render as potentially unsafe HTML (use with caution!)
                    <div dangerouslySetInnerHTML={{ __html: post.content ?? '' }} />
                ) : (
                    // Option 2: Render Markdown safely (Requires installing react-markdown)
                    // <ReactMarkdown remarkPlugins={[remarkGfm]}>
                    //    {post.content ?? ''}
                    // </ReactMarkdown>
                    <p>Content rendering needs configuration (HTML or Markdown).</p> // Placeholder
                )}
            </div>

            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
                <UpdatePostButton id={postId} />
                <DeletePostButton id={postId} />
            </div>

            {/* Back link */}
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
                <Link href="/posts" legacyBehavior>
                    <a className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
                        ‚Üê Back to all posts
                    </a>
                </Link>
            </div>
        </article>
    );
}
